#------------------------------------------------------------------------------
# Настройка GIT
#------------------------------------------------------------------------------
    git config --global user.name "name"
    git config --global user.email "email"
    git config --global init.defaultBranch name
    git config --global core.editor "editor_name"

#init [opt] [<dir>] - создает репозиторий в текущей дериктории.
#status [opt] [<pathspec>] - показывает статус текущего дерева.
#add [opt] [<pathspec>] - добавляет файлы для отслеживания (индексирует 
    изменения).
#checkout [opt] [<branch>] - Переключает ветки, либо восстанавливает состояние 
    текущей (отменяет все изменения).
    ex: git checkout . - Востанавливает файлы до состояния в последнем коммите.
    ex: git checkout HEAD -- filename - Восстанавливает указанный файл до
        состояния в указанном коммите.
#reset [opt] - Снимает индексацию изменений.
#commit [opt] - Записывает все проиндексированные изменения в репозиторий.
    opt: 
    -m <message> - добавляет коммит сообщение без вызова текстового 
    --amend - изменяет коментарий к текущему коммиту.
    
    редактора.
#log [opt] - показывает историю коммитов.
    --oneline - выводит каждую запись в 1 строке.
    --since="5 minutes ago"
    --until="5 minutes ago"
    --author="name"
    --all - выводит лог для всех веток.
    --graph - граф для веток.
Фотмат лога можно настроить глобально:
    git config --global format.pretty "%h %ad | %s%d [%an]"
    git config --global log.data short

#rm [opt | --cached] <filename> - Удаляет файл из репозитория, но 
    не удаляет сам файл.

#------------------------------------------------------------------------------
# Создание Тегов
#------------------------------------------------------------------------------
#tag [opt] - Создае, отображает, удаляет или прдтверждает таг объекта.
    ex: 
    git tag - Отображает доступные теги.
    git tag ver1 - Создает таг ver1 для текущего коммита.
    git checkout ver1 - Переход к тегу ver1.
    git -d <tag> - Удаление тега.

#------------------------------------------------------------------------------
# Отмена коммита
#------------------------------------------------------------------------------
#revert [opt] [<commit>] - Записывает новый коммит, который отменяет 
    предидущий.

#reset [opt] [<commit>] - Сбрасывает состояние ветки до указанного коммита,
    опционально можно сбросить и состояние репозитория(файлов). Сброшенные 
    коммиты доступны в логе с опцией --all.
    opt: --hard - Сбросить состояние файлов до указанного коммита(и историю в
        репозитории).
    ex: git reset --hard HEAD~2 - сбрасывает ветку на два коммита назад от
    HEAD.

#------------------------------------------------------------------------------
# Изменение (последнего) коммита
#------------------------------------------------------------------------------
var1:
    git commit --amend -m "new message"
var2:
    git reset <prev_commit>
    git add --all
    git commit -m "new message"
    
#------------------------------------------------------------------------------
# Ветки / Branch
#------------------------------------------------------------------------------
#switch [opt | -c] <branch> - Переключение и создание веток.
#merge [opt] <branch> - добавляет в текущую ветку все изменения из указанной 
    ветки с момента их разделения.
    opt:
    --abort - при конфликте во время слияния его (слияние) можно отменить.
    ex: git merge --abort
#rebase [opt] <branch> - переносит текущую ветку в топ коммит указанной ветки.
#cherry-pick [opt] <branch> - Применяет изменения произошедшие в указанном
    коммите, или диапазоне коммитов.
#------------------------------------------------------------------------------
# Патч / Patch 
#------------------------------------------------------------------------------
git diff <commit> <commit> > file.patch - создает патч.
git show <commit> - создает патч из изменений произошедших в этом коммите.
#format-patch [opt] - создает патч.
    opt: -<number> - число коммитов входящих в патч.
    ex: git format-patch -1 - создает патч из текущего коммита.

#apply [opt] file.patch - применяет патч.
    opt: --stat     - показывает что изменяется патчем.
         --check    - тест применения патча.
         -3, --3way - трехступенчатое разрешение конфликта патча.

#------------------------------------------------------------------------------
# Удаленный репозиторий / Remote repository 
#------------------------------------------------------------------------------
#push [opt | --all] - добавляет всё в облако.
    ex: git push --force origin <branch> - ставит ветку удаленного репозитория
            в соответствие локальной ветки.
#pull [opt] - Комбинация комманд fetch и merge, копирует все изменения из облака.
    opt: 
        --rebase
        --no-rebase
        --ff-only
    ex: git pull --rebase origin <branch>

git config --get remote.origin.url - Показывает URL удаленного репозитория.
git remote show origin             - Показывает URL удалённого репозитория.

#------------------------------------------------------------------------------
# Сабмодули / Submodule 
#------------------------------------------------------------------------------
#submodule [opt] - Инициализирует, обновляет, или просматривает сабмодули. 
    ex: git submodule add URL [<dir>] - добавляет сабмодуль в указанную папку
            или создает папку с названием из последней части URL если не 
            указана директория.
        git submodule update --init --recursive - докачивает сабмодули из
            репозитория.
#clone [opt] [<dir>] - копирует репозиторий в указанную папку.
    opt: --recursive - копирует репозиторий вместе с сабмодулями.

