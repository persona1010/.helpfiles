
#------------------------------------------------------------------------------
#  Перенаправление стандартного ввода/вывода
#------------------------------------------------------------------------------
0,1,2 - файловые дескрипторы stdinput, stdout, stderr соответственно.
$ ls >  output.txt      - перенаправление стандартного вывода в файл (rewrite).
$ ls >> output.txt      - перенаправление стандартного вывода в конец файла.
$ ls 2> /dev/null       - перенаправление stderr в никуда. 
$ ls >  output.txt 2>&1 - перенаправление stderr в stdout.

[WARNING] Перенаправление стандартного вывода ошибок должно производится после 
перенаправления стандартного вывода. Иначе не сработает.

#------------------------------------------------------------------------------
#  Подстановки
#------------------------------------------------------------------------------
Wildcards
Символы:
    *              Любая последовательность символов.
    ?              Любой один символ.
    [символы]      Любой символ из набора.
    [!символы]     Любой символ не входящий в набор.
    [[:class:]]    Любой симвод из класса символов.

Наиболее часто используемые классы символов:
    [:allnum:]     Любой алфавитно-цифровой символ.
    [:alpha:]      Любой адфавитный символ.
    [:digit:]      Любой цифровой символ.
    [:lower:]      Любая буква в нижнем регистре.
    [:upper:]      Любая буква в верхнем регистре.

Вместо диапазонов символов лучше использовать классы.

Простая целочисленная арифметика.

$ echo $((2+2))
  Пробелы в процессе выполнения опускаются.
  Поддерживаемые операции:
    +  - Сложение.
    -  - Вычитание.
    *  - Умножение.
    /  - Деление.
    %  - Деление по модулю.
    ** - Возведение в степень.

Подстановка фигурных скобок, диапазоны.

$ echo before-{A,B,C}-after
  result: 'before-A-after before-B-after before-C-after'

$ echo num_{1..5}
  result: 'num_1 num_2 num_3 num_4 num_5'

Начиная с версии оболочки 4.0 числа можно дополнять нулями.

$ echo {01..03}
  result: '01 02 03'

$ echo {Z..A}
  result: 'Z Y X W ...'

Допускается вложение фигурных скобок.

$ echo a{A{1,2},B{3,4}}b
  result: 'aA1b aA2b aB3b aB4b'

more examples:
    mkdir {2023..2024}-{01..12} - Создаст 24 директории для каждого месяца за 
                                  два года.

Подстановка комманд.
$ file $(ls -d /usr/bin/* | grep zip)
$ file `ls -d /usr/bin/* | grep zip` - Альтернативный синтаксис.

Экранирование.
$ echo $(cal) - Выведет все в одну строку.
$ echo "$(cal)" - Выведет несколько строк.
Одиночные кавычки подавляют все подстановки.
$ echo '$HOME'

Экранируемые символы: $, !, &, #, \ ...
Управляющие последовательности: \a, \b, \n, \r, \t.
examples:
$ sleep 10; echo -e "Time's up\a" - \a - базер.
$ sleep 10; echo "Time's up" $'\a'

#------------------------------------------------------------------------------
#  Циклы
#------------------------------------------------------------------------------

while [ true ]; do commands; done
while control-command; do commands; done
while : ; do  commands; done

for VAR in 1 2 3 4 .. N; do 
    commands; 
done

for VAR in file1 file2 file3; do 
    commands; 
done

for OUTPUT in $(linux-command);do
    commands on $OUTPUT
done

# range {FROM..TO} начиная с bash v3.0
for VAR in {1..5};do
    echo "hello world $VAR times"
done

# {START..END..INCREMENT} начиная с bash v4.0
for VAR in {0..10..2};do
    echo "hello world $VAR times"
done

# Тоже самое только с использованием комманды
for VAR in $(seq 0 2 10);do
    echo "hello world $VAR times"
done

# C style
for (( VAR=0; VAR<10; VAR++));do
    echo "hello world $VAR times"
done

#------------------------------------------------------------------------------
#  UTILITIES
#------------------------------------------------------------------------------
type - сообщает, как интерпретируется имя указанной комманды.
which - сообщает, какая программа будет выполнена.
help - выводит справку по встроенным аомандам оболочки.
man - выводит страницу справочного руководства с описанием команды.
apropos - выводит список подходящих команд.
info - выводит запись из справочного руководства Info с описаникм комманды.
whatis - выводит краткое описание команды.
alias - создает псевдонним для команды.

cat - объелинфет файлы.
sort - сортирует строки текста.
uniq - сообщает о повторяющихся строках, или удаляет их.
grep - находит и выводит строки соответствующие шаблону. 
wc - выводит число символов перевода строки, слов и байтов в каждом указанном 
     файле.
head - выводит первые строки из файла.
tail - выводит последние строки из файла.
tee - читает данные со стандартного ввода и записывает в стандартный вывод и в
      файл.

